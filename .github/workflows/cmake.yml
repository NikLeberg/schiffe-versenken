name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      matrix:
        config:
        - {
          os: ubuntu-latest,
          cmake_extra_args: "",
          artifact: main
        }
        - {
          os: macos-latest,
          cmake_extra_args: "",
          artifact: main
        }
        - {
          os: windows-latest,
          cmake_extra_args: -G "MinGW Makefiles", # use MinGW gcc compiler
          artifact: main.exe
        }
    
    runs-on: ${{ matrix.config.os }} # test on all three platforms
    
    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.18
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE ${{ matrix.config.cmake_extra_args }}
    
    - name: Patch MinGW on Windows with LTO support
      # https://stackoverflow.com/questions/32221221/mingw-x64-windows-plugin-needed-to-handle-lto-object
      if: matrix.config.os == "windows-latest"
      #shell: bash
      working-directory: ${{runner.workspace}}
      run: |
        cd C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32\
        ls -R
        mkdir .\lib\bfd-plugins
        cp .\libexec\gcc\x86_64-w64-mingw32\8.1.0\liblto_plugin-0.dll .\lib\bfd-plugins\liblto_plugin-0.dll
      
    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build. You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE  --verbose

    - name: Collect Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.config.os }}-${{ matrix.config.artifact }}
        path: ${{runner.workspace}}/build/src/${{ matrix.config.artifact }}


  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    
    - name: Download Collected Artifacts from Build
      uses: actions/download-artifact@v2

    - name: Display structure of downloaded files
      run: ls -R
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: prerelease-${{ github.sha }}
        release_name: CI/CD release of ${{ github.sha }}
        draft: false
        prerelease: true

    - name: Upload Ubuntu Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./ubuntu-latest-main/main
        asset_name: schiffeversenken-ubuntu
        asset_content_type: application/octet-stream

    - name: Upload MacOS Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./macos-latest-main/main
        asset_name: schiffeversenken-mac
        asset_content_type: application/octet-stream

    - name: Upload Win64 Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./windows-latest-main.exe/main.exe
        asset_name: schiffeversenken-win64.exe
        asset_content_type: application/octet-stream
