name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      matrix:
        config:
        - {
          os: ubuntu-latest,
          cmake_extra_args: "",
          artifact: main,
          asset_name: schiffeversenken-ubuntu
        }
        - {
          os: macos-latest,
          cmake_extra_args: "",
          artifact: main,
          asset_name: schiffeversenken-mac
        }
        - {
          os: windows-latest,
          cmake_extra_args: -G "MinGW Makefiles", # use MinGW gcc compiler
          artifact: main.exe,
          asset_name: schiffeversenken-win64.exe
        }
    
    runs-on: ${{ matrix.config.os }} # test on all three platforms
    
    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build
    
    - name: Patch MinGW on Windows with LTO support # FixMe!
      # https://stackoverflow.com/questions/32221221/mingw-x64-windows-plugin-needed-to-handle-lto-object
      if: runner.os == 'Windows'
      run: |
        cd C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\
        copy .\libexec\gcc\x86_64-w64-mingw32\8.1.0\liblto_plugin-0.dll .\bin\liblto_plugin-0.dll

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.18
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE ${{ matrix.config.cmake_extra_args }}
      
    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build. You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE  --verbose

    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{runner.workspace}}/build/src/${{ matrix.config.artifact }}
        asset_name: ${{ matrix.config.asset_name }}
        tag: ci-cd
        overwrite: true
        prerelease: true
        body: "All pushes to the repository will get automaticly build and tested using github action workflows.
              The resulting binaries for Windows, Linux and MaxOS will be published here.\n
              The sourcecode-zipfiles don't get updated, please ignore them.\n
              Last sucessfully build push: #${{ github.sha }}."
